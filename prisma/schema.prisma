generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  userId    String    @id @default(cuid()) @map("user_id")
  name      String    @db.VarChar(100)
  username  String    @unique
  email     String    @unique
  password  String
  role      String
  isActive  Boolean   @default(true) @map("is_active")
  createdAt DateTime? @map("created_at")
  updatedAt DateTime? @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  movements Movement[]
  loginLog  LoginLog[]

  @@map("users")
}

model Asset {
  assetId         String    @id @default(cuid()) @map("asset_id")
  content         String
  status          String
  currentLocation String    @map("current_location")
  reuseCount      Int       @default(0) @map("reuse_count")
  isActive        Boolean   @default(true) @map("is_active")
  deletedAt       DateTime? @map("deleted_at")
  createdAt       DateTime? @map("created_at")
  updatedAt       DateTime? @map("updated_at")
  volume          BigInt

  movements Movement[]

  @@map("assets")
}

model Movement {
  movementId        String    @id @default(cuid()) @map("movement_id")
  assetId           String    @map("asset_id")
  userId            String    @map("user_id")
  pickupTime        DateTime? @map("pickup_time")
  deliveryTime      DateTime? @map("delivery_time")
  returnedToFactory Boolean   @default(false) @map("returned_to_factory")
  location          String

  asset Asset @relation(fields: [assetId], references: [assetId])
  user  User  @relation(fields: [userId], references: [userId])

  @@map("movements")
}

model LoginLog {
  logId     String    @id @default(cuid()) @map("log_id")
  userId    String    @map("user_id")
  loginTime DateTime? @map("login_time")
  ip        String
  userAgent String    @map("user_agent")

  user User @relation(fields: [userId], references: [userId])

  @@map("login_logs")
}
